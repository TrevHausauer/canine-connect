@page "/applications"
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Components.QuickGrid
@using CanineConnect.Models
@using CanineConnect.Data
@using StateObjects
@implements IAsyncDisposable
@inject State state
@inject IDbContextFactory<CanineConnect.Data.CanineConnectContext> DbFactory

<PageTitle>Applications</PageTitle>

<h1>Applications</h1>

<QuickGrid Class="table" Items="applications">
    <PropertyColumn Property="application => application.Approved" />
    <PropertyColumn Property="application => application.Timestamp" />
    <PropertyColumn Property="application => application.DogListingId" />
    <PropertyColumn Property="application => application.UserId" />
    <PropertyColumn Property="application => application.Salary" />
    <PropertyColumn Property="application => application.Animals" />
    <PropertyColumn Property="application => application.Dependents" />

    <TemplateColumn Context="application">
        <a href="@($"applications/edit?id={application.Id}")">Edit</a> |
        <a href="@($"applications/details?id={application.Id}")">Details</a> |
        <a href="@($"applications/delete?id={application.Id}")">Delete</a>
    </TemplateColumn>
</QuickGrid>

@code {
    private CanineConnectContext context = default!;
    private IQueryable<Application>? applications;

    protected override void OnInitialized()
    {
        context = DbFactory.CreateDbContext();

        applications = context.Application.Where(e => e.UserId == state.ActiveUser.Id || e.DogListing.Shelter.UserId == state.ActiveUser.Id);
    }

    public async ValueTask DisposeAsync() => await context.DisposeAsync();
}
