@page "/admin/eventposts/details"
@using Microsoft.EntityFrameworkCore
@using CanineConnect.Models
@inject IDbContextFactory<CanineConnect.Data.CanineConnectContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Details</PageTitle>

<h1>Details</h1>

<div>
    <h2>EventPost</h2>
    <hr />
    @if (eventpost is null)
    {
        <p><em>Loading...</em></p>
    }
    else {
        <dl class="row">
            <dt class="col-sm-2">Name</dt>
            <dd class="col-sm-10">@eventpost.Name</dd>
            <dt class="col-sm-2">Date</dt>
            <dd class="col-sm-10">@eventpost.Date</dd>
            <dt class="col-sm-2">Time</dt>
            <dd class="col-sm-10">@eventpost.Time</dd>
            <dt class="col-sm-2">Description</dt>
            <dd class="col-sm-10">@eventpost.Description</dd>
            <dt class="col-sm-2">LocationId</dt>
            <dd class="col-sm-10">@eventpost.LocationId</dd>
            <dt class="col-sm-2">HostId</dt>
            <dd class="col-sm-10">@eventpost.HostId</dd>
        </dl>
        <div>
            <a href="@($"/admin/eventposts/edit?id={eventpost.Id}")">Edit</a> |
            <a href="@($"/admin/eventposts")">Back to List</a>
        </div>
    }
</div>

@code {
    private EventPost? eventpost;

    [SupplyParameterFromQuery]
    private int Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        eventpost = await context.Event.FirstOrDefaultAsync(m => m.Id == Id);

        if (eventpost is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }
}
