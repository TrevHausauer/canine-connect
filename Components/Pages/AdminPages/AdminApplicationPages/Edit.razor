@page "/admin/applications/edit"
@using Microsoft.EntityFrameworkCore
@using CanineConnect.Models
@inject IDbContextFactory<CanineConnect.Data.CanineConnectContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Edit</PageTitle>

<h1>Edit</h1>

<h2>Application</h2>
<hr />
@if (Application is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="row">
        <div class="col-md-4">
            <EditForm method="post" Model="Application" OnValidSubmit="UpdateApplication" FormName="edit" Enhance>
                <DataAnnotationsValidator />
                <ValidationSummary role="alert"/>
                <input type="hidden" name="Application.Id" value="@Application.Id" />
                <div class="mb-3">
                    <label for="approved" class="form-label">Approved:</label>
                    <InputCheckbox id="approved" @bind-Value="Application.Approved" class="form-check-input" aria-required="true"/>
                    <ValidationMessage For="() => Application.Approved" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="timestamp" class="form-label">Timestamp:</label>
                    <InputDate id="timestamp" @bind-Value="Application.Timestamp" class="form-control" aria-required="true"/>
                    <ValidationMessage For="() => Application.Timestamp" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="doglistingid" class="form-label">DogListingId:</label>
                    <InputNumber id="doglistingid" @bind-Value="Application.DogListingId" class="form-control" aria-required="true"/>
                    <ValidationMessage For="() => Application.DogListingId" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="userid" class="form-label">UserId:</label>
                    <InputNumber id="userid" @bind-Value="Application.UserId" class="form-control" aria-required="true"/>
                    <ValidationMessage For="() => Application.UserId" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="salary" class="form-label">Salary:</label>
                    <InputNumber id="salary" @bind-Value="Application.Salary" class="form-control" />
                    <ValidationMessage For="() => Application.Salary" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="animals" class="form-label">Animals:</label>
                    <InputNumber id="animals" @bind-Value="Application.Animals" class="form-control" />
                    <ValidationMessage For="() => Application.Animals" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="dependents" class="form-label">Dependents:</label>
                    <InputNumber id="dependents" @bind-Value="Application.Dependents" class="form-control" />
                    <ValidationMessage For="() => Application.Dependents" class="text-danger" />
                </div>
                <button type="submit" class="btn btn-primary">Save</button>
            </EditForm>
        </div>
    </div>
}

<div>
    <a href="/admin/applications">Back to List</a>
</div>

@code {
    [SupplyParameterFromQuery]
    private int Id { get; set; }

    [SupplyParameterFromForm]
    private Application? Application { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        Application ??= await context.Application.FirstOrDefaultAsync(m => m.Id == Id);

        if (Application is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    // To protect from overposting attacks, enable the specific properties you want to bind to.
    // For more information, see https://learn.microsoft.com/aspnet/core/blazor/forms/#mitigate-overposting-attacks.
    private async Task UpdateApplication()
    {
        using var context = DbFactory.CreateDbContext();
        context.Attach(Application!).State = EntityState.Modified;

        try
        {
            await context.SaveChangesAsync();
        }
        catch (DbUpdateConcurrencyException)
        {
            if (!ApplicationExists(Application!.Id))
            {
                NavigationManager.NavigateTo("notfound");
            }
            else
            {
                throw;
            }
        }

        NavigationManager.NavigateTo("/admin/applications");
    }

    private bool ApplicationExists(int id)
    {
        using var context = DbFactory.CreateDbContext();
        return context.Application.Any(e => e.Id == id);
    }
}
