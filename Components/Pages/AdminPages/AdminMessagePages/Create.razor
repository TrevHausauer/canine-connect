@page "/admin/messages/create"
@using Microsoft.EntityFrameworkCore
@using CanineConnect.Models
@inject IDbContextFactory<CanineConnect.Data.CanineConnectContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Create</PageTitle>

<h1>Create</h1>

<h2>Message</h2>
<hr />
<div class="row">
    <div class="col-md-4">
        <EditForm method="post" Model="Message" OnValidSubmit="AddMessage" FormName="create" Enhance>
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" role="alert" />
            <div class="mb-3">
                <label for="text" class="form-label">Text:</label>
                <InputText id="text" @bind-Value="Message.Text" class="form-control" aria-required="true" />
                <ValidationMessage For="() => Message.Text" class="text-danger" />
            </div>
            <div class="mb-3">
                <label for="timestamp" class="form-label">Timestamp:</label>
                <InputDate id="timestamp" @bind-Value="Message.Timestamp" class="form-control" aria-required="true" />
                <ValidationMessage For="() => Message.Timestamp" class="text-danger" />
            </div>
            <div class="mb-3">
                <label for="senderid" class="form-label">SenderId:</label>
                <InputNumber id="senderid" @bind-Value="Message.SenderId" class="form-control" aria-required="true" />
                <ValidationMessage For="() => Message.SenderId" class="text-danger" />
            </div>
            <div class="mb-3">
                <label for="receiverid" class="form-label">ReceiverId:</label>
                <InputNumber id="receiverid" @bind-Value="Message.ReceiverId" class="form-control" aria-required="true" />
                <ValidationMessage For="() => Message.ReceiverId" class="text-danger" />
            </div>
            <button type="submit" class="btn btn-primary">Create</button>
        </EditForm>
    </div>
</div>

<div>
    <a href="/admin/messages">Back to List</a>
</div>

@code {
    [SupplyParameterFromForm]
    private Message Message { get; set; } = new();

    // To protect from overposting attacks, see https://learn.microsoft.com/aspnet/core/blazor/forms/#mitigate-overposting-attacks.
    private async Task AddMessage()
    {
        using var context = DbFactory.CreateDbContext();
        context.Message.Add(Message);
        await context.SaveChangesAsync();
        NavigationManager.NavigateTo("/admin/messages");
    }
}
