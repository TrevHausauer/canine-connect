@rendermode InteractiveServer
@page "/events/details"
@using Microsoft.EntityFrameworkCore
@using CanineConnect.Models
@inject IDbContextFactory<CanineConnect.Data.CanineConnectContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Details</PageTitle>
<div style="padding: 20px">
	<h1>Details</h1>
	<br />
	<div>
		<h2 style="color: forestgreen">EventPost</h2>
		<hr />
		@if (eventpost is null)
		{
			<p><em>Loading...</em></p>
		}
		else
		{
			<dl class="row">
				<dt class="col-sm-2">Name</dt>
				<dd class="col-sm-10">@eventpost.Name</dd>
				<dt class="col-sm-2">Date</dt>
				<dd class="col-sm-10">@eventpost.Date</dd>
				<dt class="col-sm-2">Time</dt>
				<dd class="col-sm-10">@eventpost.Time</dd>
				<dt class="col-sm-2">Description</dt>
				<dd class="col-sm-10">@eventpost.Description</dd>
				<dt class="col-sm-2">Location</dt>
				<dd class="col-sm-10">@LocationToString(eventpost.Location)</dd>
				<dt class="col-sm-2">Host</dt>
				<dd class="col-sm-10">@hostToString(eventpost.Host)</dd>
			</dl>
			<div>
				<a href="@($"/events/edit?id={eventpost.Id}")">Edit</a> |
				<a href="@($"/events/index")">Back to List</a>
			</div>
		}
	</div>
</div>
@code {
	private EventPost? eventpost;

	[SupplyParameterFromQuery]
	private int Id { get; set; }

	List<EventPost> _events = new List<EventPost>();

	protected override async Task OnInitializedAsync()
	{
		using (var context = DbFactory.CreateDbContext()){ 

			_events = await context.Event
				.OrderBy(e => e.Date)
				.Include(e => e.Host)
				.Include(e => e.Location)
				.ToListAsync();
			eventpost = await context.Event.FirstOrDefaultAsync(m => m.Id == Id);
		};

		if (eventpost is null)
		{
			NavigationManager.NavigateTo("notfound");
		}
	}

	protected string LocationToString(Address address)
	{
		string location = $"{address.Street}, {address.City}, {address.State}, {address.PostalCode} {address.Country}";

		return location;
	}

	protected string hostToString(Shelter shelter)
	{

		string host = shelter.ShelterName;

		return host;
	}
}
