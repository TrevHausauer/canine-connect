@rendermode InteractiveServer
@page "/events/create"
@using Microsoft.EntityFrameworkCore
@using CanineConnect.Models
@using CanineConnect.Components.Pages.LoginPages
@inject IDbContextFactory<CanineConnect.Data.CanineConnectContext> DbFactory
@inject NavigationManager NavigationManager
@inject State state
@using CanineConnect.StateObjects

<PageTitle>Create</PageTitle>
<div style="padding: 20px">
    <h1>Create</h1>
    <hr />
    <h2 style="color: forestgreen">EventPost</h2>
    <div class="row">
        <div class="col-md-4">
            <EditForm method="post" Model="EventPost" OnValidSubmit="AddEventPost" FormName="create" Enhance>
                <DataAnnotationsValidator />
                <ValidationSummary class="text-danger" role="alert"/>
                <div class="mb-3">
                    <label for="name" class="form-label">Name:</label> 
                    <InputText id="name" @bind-Value="EventPost.Name" class="form-control" aria-required="true"/> 
                    <ValidationMessage For="() => EventPost.Name" class="text-danger" /> 
                </div>        
                <div class="mb-3">
                    <label for="date" class="form-label">Date:</label> 
                    <InputDate id="date" @bind-Value="EventPost.Date" class="form-control" aria-required="true"/> 
                    <ValidationMessage For="() => EventPost.Date" class="text-danger" /> 
                </div>        
                <div class="mb-3">
                    <label for="time" class="form-label">Time:</label>
                    <InputDate Type="InputDateType.Time" id="time" @bind-Value="EventPost.Time" class="form-control" aria-required="true" />
                    <ValidationMessage For="() => EventPost.Time" class="text-danger" /> 
                </div>        
                <div class="mb-3">
                    <label for="description" class="form-label">Description:</label> 
                    <InputText id="description" @bind-Value="EventPost.Description" class="form-control" aria-required="true"/> 
                    <ValidationMessage For="() => EventPost.Description" class="text-danger" /> 
                </div>                   
                <h2 style="color: forestgreen">Location Info.</h2>
                <hr />
                <AddressForm EditableAddress="EventPost.Location" />
                <button type="submit" class="btn btn-primary">Create</button>
            </EditForm>
        </div>
    </div>

    <div>
        <a href="/events/index">Back to List</a>
    </div>
</div>
@code {
    [SupplyParameterFromForm]
    private EventPost EventPost { get; set; } = new();

    protected override Task OnInitializedAsync() 
    {
        EventPost.Location = new Address();

        EventPost.HostId = state.ActiveShelter.Id;
        return base.OnInitializedAsync();
    }

    // To protect from overposting attacks, see https://learn.microsoft.com/aspnet/core/blazor/forms/#mitigate-overposting-attacks.
    private async Task AddEventPost()
    {
        using var context = DbFactory.CreateDbContext();
        context.Event.Add(EventPost);
        await context.SaveChangesAsync();
        NavigationManager.NavigateTo("/events/index");
    }
}
